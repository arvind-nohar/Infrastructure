seven.seventrees.nl {
    tls arvind.nohar@seventrees.nl
    
    # Handle embedded iframe content
    @embed {
        query embed=true
    }
    handle @embed {
        header Access-Control-Allow-Origin "*"
        header Access-Control-Allow-Methods "GET, POST, OPTIONS"
        header Access-Control-Allow-Headers "Content-Type, Authorization"
        # Remove frame restrictions for embedded content
        header -X-Frame-Options
        reverse_proxy host.docker.internal:5000 {
            flush_interval -1
        }
    }
    
    # Handle injection script
    @inject_script path /js/inject-chatbot.js
    handle @inject_script {
        header Access-Control-Allow-Origin "*"
        header Content-Type "application/javascript"
        header -X-Frame-Options
        reverse_proxy host.docker.internal:5000
    }
    
    # Default handling for all other routes
    reverse_proxy host.docker.internal:5000 {
        flush_interval -1
    }
    
    header {
        X-Content-Type-Options nosniff
        Referrer-Policy no-referrer-when-downgrade
        Access-Control-Allow-Origin "*"
        Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"
        Access-Control-Allow-Headers "Content-Type, Authorization"
    }
}

# CORS snippet for handling cross-origin requests
(cors) {
    @cors_preflight method OPTIONS
    @cors header Origin {args.0}
    
    handle @cors_preflight {
        header Access-Control-Allow-Origin "{args.0}"
        header Access-Control-Allow-Methods "GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS,TRACE,CONNECT"
        header Access-Control-Allow-Headers *
        header Access-Control-Allow-Credentials "true"
        header Access-Control-Max-Age "86400"
        respond "" 204
    }
    
    handle @cors {
        header Access-Control-Allow-Origin "{args.0}"
        header Access-Control-Allow-Credentials "true"
    }
}

testing.seventrees.nl {
    
    @supa_api path /rest/v1/* /auth/v1/* /realtime/v1/* /functions/v1/*

    handle @supa_api {
        reverse_proxy kong:8000
    }

    handle_path /storage/v1/* {
        import cors *
        reverse_proxy storage:5000
    }

    handle /upload/resumable* {
        import cors *
        reverse_proxy storage:5000
    }

    handle_path /goapi/* {
        reverse_proxy kong:8000
    }

    handle {
        reverse_proxy studio:3000
    }
    
    header -server

    # Layer-4 app: listen on 0.0.0.0:5432, terminate TLS, proxy to Supavisor
    layer4 {
        # Public Postgres endpoint (TLS on):5432
        0.0.0.0:5432 {
            route {
            # Terminate client TLS and obtain/renew certs automatically.
            # Caddy will ACME-challenge via its HTTP app (ports 80/443) if present,
            # or via TLS-ALPN when suitable.
            tls

            # Raw TCP proxy to the pooler inside the Docker network
            proxy {
                upstream supavisor:5432
            }
        }
      }
    }
}
